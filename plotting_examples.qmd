---
title: "Plotting Example"
subtitle: "Demonstrates latex math and plotting"
author: "AUTHORS"
date: "`r format(Sys.Date(), '%d %b %Y')`"
# universal output options
number-sections: true
toc: true
toc-depth: 2
fig-width: 8
fig-height: 6
df-print: tibble
embed-resources: true
# format specific output options
format: 
  # html file
  html: 
    code-tools: true
    code-fold: show
    toc-float: true
# knitr global chunk options
knitr: 
  opts_chunk: 
    fig.path: "plots/"
    fig.keep: "all"
    dev: ['png', 'pdf']
    dev.args: 
      pdf: 
        encoding: 'WinAnsi'
        useDingbats: false
# rstudio editor options
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: install
#| eval: false
# run this block once in RStudio to install all packages required for this example
install.packages("tidyverse") # tidyverse data and plotting tools
install.packages("latex2exp") # rendering latex equations in plots
```


```{r}
#| label: setup
#| message: false

# load libraries
library(tidyverse) 
library(latex2exp)

# source all relevant scripting files
source(file.path("scripts", "plotting_functions.R"))
source(file.path("scripts", "table_functions.R"))
```

# $\LaTeX$ Math

This is just markdown that can include latex math.

$$
\begin{align}
\dot{x} & = \sigma(y-x) \\
\dot{y} & = \rho x - y - xz \\
\dot{z} & = -\beta z + xy
\end{align}
$$

# Simple Plot

```{r}
#| label: fig-simple-plot
#| fig-width: 8
#| fig-height: 6

# generate a simple plot with ggplot2
p1 <- mpg |> 
  ggplot() +
  aes(x = hwy, y = cty, color = drv) + 
  geom_point()
p1
```

# Polished Plots

## Latex labels

```{r}
#| label: fig-polished-plot-w-latex-labels
#| warning: false
#| fig-width: 6
#| fig-height: 6

# generate a more polished plot
p2 <- mpg |>
  # upgrade the color scale to include some latex symbols
  mutate(
    latex_drv = 
      # turn into ordered variable (factor) that keeps the order
      as_factor(drv) |> 
      # introduce latex substitutions
      fct_recode(
        "$\\left(\\frac{\\textbf{rear drv}}{\\beta^2}\\right)$" = "r",
        "$\\int_{\\infinity}\\sqrt[2]_{\\textbf{front drv}}$" = "f"),
    cyl_info = paste("cyl:", cyl) |> as_factor()
  ) |>
  # start the plot
  ggplot() + 
  aes(x = hwy, y = cty, color = latex_drv) + 
  geom_point() +
  # add latex to color, facet and axis labels
  scale_color_discrete(labels = label_latex()) +
  facet_wrap(~latex_drv, labeller = label_latex(), ncol = 1) +
  labs(x = TeX("my x axis $\\delta^{42}X$ [\U2030]")) + 
  # use theme_figure from the plotting_functions.R
  theme_figure(text_size = 16)
p2
```

```{r}
#| label: fig-large-plot-w-latex-labels
#| warning: false
#| fig-width: 8
#| fig-height: 10

# or with multi facets
p2 + facet_wrap(~latex_drv + cyl_info, labeller = label_latex(multi_line = FALSE)) 
```


## Regression labels

```{r}
#| label: fig-polished-plot-w-regression-labels
#| warning: false
#| fig-width: 6
#| fig-height: 8
p3 <- p2 +
  # add regression
  geom_smooth(method = lm, formula = y ~ x, linetype = 2) +
  # add regression label to previous plot
  geom_text(
    data = function(df) {
      df |>
        group_by(latex_drv) |>
        generate_regression_fit_label(
          formula = cty ~ hwy,
          func = lm,
          include_r2 = TRUE
        ) |>
        filter(!has_error)
    },
    mapping = aes(color = NULL, label = expr_label, x = -Inf, y = Inf),
    hjust = -0.1, vjust = 1.3, parse = TRUE, size = 4, show.legend = FALSE
  ) 
p3
```

## Log axis formatting

```{r}
#| label: fig-polished-plot-w-formatte-log-axis
#| warning: false
#| fig-width: 8
#| fig-height: 4
diamonds |>
  slice_sample(n = 1000) |>
  ggplot() +
  aes(x = carat, y = price, color = cut) +
  geom_point() + 
  scale_y_log10(label = label_scientific_log(), guide = "axis_logticks") +
  theme_figure(text_size = 16)
```

## Y axis break

```{r}
#| label: fig-polished-plot-w-y-axis-break
#| warning: false
#| fig-width: 8
#| fig-height: 4
p <- diamonds |>
  slice_sample(n = 1000) |>
  ggplot() +
  aes(x = carat, y = price, color = cut) +
  geom_point() + 
  theme_figure(text_size = 16, legend = FALSE)

plot_with_y_gap(
  pb = p, pb_ylim = c(0, 1100), pb_breaks = c(0, 250, 500, 750, 1000),
  pt = p, pt_ylim = c(9000, 16000), pt_breaks = c(10000, 12500, 15000),
  pb_gap_marker_offset = 0.02, pt_gap_marker_offset = 0.03, 
  pb_gap_marker_width = 0.25, pt_gap_marker_width = 0.2
)
```

